/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */


buildscript { // this stuff operates on the rest of the scrpt; adds plugin for the script itself
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
    repositories {
        mavenLocal()
        mavenCentral()

    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'javafx-gradle-plugin'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
//    compile "com.twilio.sdk:twilio:7.8.0"

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    /* Derby jdbc thing. From here:
    https://mvnrepository.com/artifact/org.apache.derby/derby
    */
    compile group: 'org.apache.derby', name: 'derby', version: '10.13.1.1'

    // theming library for javafx
    compile 'com.jfoenix:jfoenix:1.2.0'
}

jfx {
    // minimal requirement for jfxJar-task
    mainClass = 'main.ApplicationController'

    // minimal requirement for jfxNative-task
    vendor = 'fuschia-flying-spaghetti-monster'
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        resources {
            srcDirs = ['src/main/resources', 'src/test/resources']
        }
    }
}

//test { // show stdout and stderr when running tests
//    testLogging.showStandardStreams = true
//}


// Use main class for jar
jar {
    manifest.attributes("Main-Class": "main.ApplicationController")
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

}
